
name: "PHP Setup"
description: "Default setup for PHP Using"

inputs:
  CI_ACCESS_TOKEN:
    description: "ci access token"
    required: true

runs:
  using: "composite"
  steps:
#    - name: Build docker image
#      shell: bash
#      run: docker build --pull
    - name: Check out code
      uses: actions/checkout@v5
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.CI_ACCESS_TOKEN }}
    - name: Pull docker image
      shell: bash
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY_NAME: ${{ inputs.ECR_REPOSITORY_NAME }}
      run: docker pull skadi666/app-php:amd64-latest
#    - name: Set up Docker buildx
#      uses: docker/setup-buildx-action@v3
#    - name: Build and push
#      uses: docker/build-push-action@v6
#      with:
##        file: Dockerfile
#        push: true
#        tags: skadi666/app-php:latest
##        secrets: |
##          GIT_AUTH_TOKEN=${{ secrets.CI_ACCESS_TOKEN }}
    - name: Up docker PHP image
      shell: bash
      run: docker compose up -d php
    - name: Get env.local
      shell: bash
      run: sudo echo -n "APP_ENV=test" > .env.local
    - name: Get Composer Cache Directory
      id: composer-cache
      shell: bash
      run: |
        echo "::set-output name=dir::./.composer"
    - uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
    - uses: actions/cache@v4
      id: cache-vendors
      with:
        path: vendor
        key: ${{ runner.os }}-vendors-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-vendors-
    - name: Composer install if vendor cache does not hit
      shell: bash
      run: |
        if echo ${{ steps.cache-vendors.outputs.cache-hit }} | grep -c "true"
        then
          echo "Cache hit - skipping composer install"
        else
          docker-compose exec -T -e COMPOSER_CACHE_DIR=./.composer php composer install
          docker-compose exec -T php php vendor/bin/simple-phpunit --version
        fi
