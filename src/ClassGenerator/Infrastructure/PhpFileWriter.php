<?php

namespace App\ClassGenerator\Infrastructure;

use App\ClassGenerator\Domain\ClassWriterInterface;
use App\ClassGenerator\Domain\Model\ClassCollectionInterface;
use App\ClassGenerator\Infrastructure\Exceptions\FileNotWrittenException;
use App\ClassGenerator\Infrastructure\Exceptions\OutputDirNotValidException;

class PhpFileWriter implements ClassWriterInterface
{
    private const string OPENING_PHP_TAG = "<?php\n";
    private const string NAMESPACE_TAG = "namespace App\AutoGenerated;\n";

    public function __construct(private readonly mixed $outputDir)
    {
    }

    /**
     * @throws OutputDirNotValidException
     * @throws FileNotWrittenException
     */
    public function write(ClassCollectionInterface $classes): void
    {
        $fileContent = self::OPENING_PHP_TAG.self::NAMESPACE_TAG;
        foreach ($classes->getClasses() as $class) {
            $fileContent .= sprintf("class %s\n{\n}\n", $class);
        }
        if (!is_dir($this->outputDir)) {
            try {
                mkdir($this->outputDir);
            } catch (\Throwable $e) {
                throw new OutputDirNotValidException(dir: $this->outputDir, previous: $e);
            }
        }
        $filename = $this->outputDir.'/'.time().'.php';
        $success = file_put_contents($filename, $fileContent);
        if (!$success) {
            throw new FileNotWrittenException($filename);
        }
    }
}
